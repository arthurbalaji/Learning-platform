{"ast":null,"code":"var _jsxFileName = \"E:\\\\Chatbot(Meta Llama 3.1 8B)\\\\React-frontend\\\\src\\\\components\\\\chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  var _location$state, _auth$currentUser;\n  const {\n    chatId\n  } = useParams();\n  const location = useLocation();\n  const email = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [chatName, setChatName] = useState('');\n  useEffect(() => {\n    if (chatId) {\n      // Fetch chat messages and chat name when the component mounts\n      axios.get(`http://localhost:8080/chats/${chatId}`).then(response => {\n        setMessages(response.data.messages || []);\n        setChatName(response.data.name || '');\n      }).catch(error => {\n        console.error('Error fetching chat messages:', error);\n      });\n    }\n  }, [chatId]);\n  const handleSend = () => {\n    if (!input.trim()) return;\n    const userMessage = {\n      sender: 'user',\n      content: input,\n      timestamp: new Date().toISOString()\n    };\n\n    // Add user message to the chat\n    axios.put(`http://localhost:8080/chats/${chatId}/messages`, userMessage).then(response => {\n      setMessages([...messages, userMessage]);\n\n      // Send user input to the Flask backend API\n      axios.post('http://127.0.0.1:5000/chat', {\n        message: input\n      }).then(apiResponse => {\n        const aiMessage = {\n          sender: 'ai',\n          content: apiResponse.data.response,\n          timestamp: new Date().toISOString()\n        };\n\n        // Add AI message to the chat\n        axios.put(`http://localhost:8080/chats/${chatId}/messages`, aiMessage).then(() => {\n          setMessages(prevMessages => [...prevMessages, aiMessage]);\n        }).catch(error => {\n          console.error('Error adding AI message to chat:', error);\n        });\n      }).catch(error => {\n        console.error('Error getting AI response:', error);\n      });\n    }).catch(error => {\n      console.error('Error adding user message to chat:', error);\n    });\n    setInput('');\n  };\n  const handleChatNameChange = e => {\n    setChatName(e.target.value);\n  };\n  const handleChatNameBlur = () => {\n    // Update chat name in the backend\n    axios.put(`http://localhost:8080/chats/${chatId}`, {\n      name: chatName\n    }).catch(error => {\n      console.error('Error updating chat name:', error);\n    });\n  };\n  const formatMessageContent = content => {\n    // Replace text between double asterisks with bold text\n    const formattedContent = content.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n    return {\n      __html: formattedContent\n    };\n  };\n  const formatTimestamp = timestamp => {\n    return new Date(timestamp).toLocaleString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: chatName,\n      onChange: handleChatNameChange,\n      onBlur: handleChatNameBlur,\n      placeholder: \"Enter chat name\",\n      className: \"chat-name-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.sender}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: formatTimestamp(message.timestamp)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"content\",\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          dangerouslySetInnerHTML: formatMessageContent(message.content)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n_s(Chat, \"ZEDCHw4lP5c10Ti2JlmqUhvcVLA=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","axios","auth","jsxDEV","_jsxDEV","Chat","_s","_location$state","_auth$currentUser","chatId","location","email","state","currentUser","messages","setMessages","input","setInput","chatName","setChatName","get","then","response","data","name","catch","error","console","handleSend","trim","userMessage","sender","content","timestamp","Date","toISOString","put","post","message","apiResponse","aiMessage","prevMessages","handleChatNameChange","e","target","value","handleChatNameBlur","formatMessageContent","formattedContent","replace","__html","formatTimestamp","toLocaleString","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onBlur","placeholder","className","map","index","style","whiteSpace","dangerouslySetInnerHTML","onClick","_c","$RefreshReg$"],"sources":["E:/Chatbot(Meta Llama 3.1 8B)/React-frontend/src/components/chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { auth } from '../firebase';\n\nconst Chat = () => {\n    const { chatId } = useParams();\n    const location = useLocation();\n    const email = location.state?.email || auth.currentUser?.email;\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n    const [chatName, setChatName] = useState('');\n\n    useEffect(() => {\n        if (chatId) {\n            // Fetch chat messages and chat name when the component mounts\n            axios.get(`http://localhost:8080/chats/${chatId}`)\n                .then(response => {\n                    setMessages(response.data.messages || []);\n                    setChatName(response.data.name || '');\n                })\n                .catch(error => {\n                    console.error('Error fetching chat messages:', error);\n                });\n        }\n    }, [chatId]);\n\n    const handleSend = () => {\n        if (!input.trim()) return;\n\n        const userMessage = {\n            sender: 'user',\n            content: input,\n            timestamp: new Date().toISOString()\n        };\n\n        // Add user message to the chat\n        axios.put(`http://localhost:8080/chats/${chatId}/messages`, userMessage)\n            .then(response => {\n                setMessages([...messages, userMessage]);\n\n                // Send user input to the Flask backend API\n                axios.post('http://127.0.0.1:5000/chat', { message: input })\n                    .then(apiResponse => {\n                        const aiMessage = {\n                            sender: 'ai',\n                            content: apiResponse.data.response,\n                            timestamp: new Date().toISOString()\n                        };\n\n                        // Add AI message to the chat\n                        axios.put(`http://localhost:8080/chats/${chatId}/messages`, aiMessage)\n                            .then(() => {\n                                setMessages(prevMessages => [...prevMessages, aiMessage]);\n                            })\n                            .catch(error => {\n                                console.error('Error adding AI message to chat:', error);\n                            });\n                    })\n                    .catch(error => {\n                        console.error('Error getting AI response:', error);\n                    });\n            })\n            .catch(error => {\n                console.error('Error adding user message to chat:', error);\n            });\n\n        setInput('');\n    };\n\n    const handleChatNameChange = (e) => {\n        setChatName(e.target.value);\n    };\n\n    const handleChatNameBlur = () => {\n        // Update chat name in the backend\n        axios.put(`http://localhost:8080/chats/${chatId}`, { name: chatName })\n            .catch(error => {\n                console.error('Error updating chat name:', error);\n            });\n    };\n\n    const formatMessageContent = (content) => {\n        // Replace text between double asterisks with bold text\n        const formattedContent = content.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n        return { __html: formattedContent };\n    };\n\n    const formatTimestamp = (timestamp) => {\n        return new Date(timestamp).toLocaleString();\n    };\n\n    return (\n        <div>\n            <h1>Chat</h1>\n            <input\n                type=\"text\"\n                value={chatName}\n                onChange={handleChatNameChange}\n                onBlur={handleChatNameBlur}\n                placeholder=\"Enter chat name\"\n                className=\"chat-name-input\"\n            />\n            <div className=\"chat-history\">\n                {messages.map((message, index) => (\n                    <div key={index} className={`message ${message.sender}`}>\n                        <span className=\"timestamp\">{formatTimestamp(message.timestamp)}</span>\n                        <span className=\"content\" style={{ whiteSpace: 'pre-wrap' }} dangerouslySetInnerHTML={formatMessageContent(message.content)}></span>\n                    </div>\n                ))}\n            </div>\n            <div className=\"chat-input\">\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    placeholder=\"Type your message...\"\n                />\n                <button onClick={handleSend}>Send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}