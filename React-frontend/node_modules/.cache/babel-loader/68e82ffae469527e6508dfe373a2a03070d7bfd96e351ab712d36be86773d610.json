{"ast":null,"code":"var _jsxFileName = \"E:\\\\Chatbot(Meta Llama 3.1 8B)\\\\React-frontend\\\\src\\\\components\\\\chathistory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatHistory = () => {\n  _s();\n  const [chats, setChats] = useState([]);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    email\n  } = location.state;\n  useEffect(() => {\n    // Fetch user-specific chats when the component mounts\n    axios.get(`http://localhost:8080/chats/user/${email}`).then(response => {\n      setChats(response.data);\n    }).catch(error => {\n      console.error('Error fetching chats:', error);\n    });\n  }, [email]);\n  const handleChatClick = chatId => {\n    // Navigate to the chat page with the selected chat ID and user email\n    navigate(`/chat/${chatId}`, {\n      state: {\n        email\n      }\n    });\n  };\n  const handleCreateChat = () => {\n    // Create a new chat with null data\n    const newChat = {\n      name: null,\n      messages: []\n    };\n    axios.post(`http://localhost:8080/chats/${email}`, newChat).then(response => {\n      var _response$data;\n      const newChatId = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.id;\n      if (newChatId !== undefined) {\n        navigate(`/chat/${newChatId}`, {\n          state: {\n            email\n          }\n        });\n      } else {\n        console.error('Error: newChatId is undefined');\n      }\n    }).catch(error => {\n      console.error('Error creating new chat:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateChat,\n      children: \"+ New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: chats.map(chat => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleChatClick(chat.id),\n        children: chat.name || 'Unnamed Chat'\n      }, chat.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatHistory, \"J705183FWsI9N4hf0GQFlhxaywE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ChatHistory;\nexport default ChatHistory;\nvar _c;\n$RefreshReg$(_c, \"ChatHistory\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","jsxDEV","_jsxDEV","ChatHistory","_s","chats","setChats","navigate","location","email","state","get","then","response","data","catch","error","console","handleChatClick","chatId","handleCreateChat","newChat","name","messages","post","_response$data","newChatId","id","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","chat","_c","$RefreshReg$"],"sources":["E:/Chatbot(Meta Llama 3.1 8B)/React-frontend/src/components/chathistory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst ChatHistory = () => {\n    const [chats, setChats] = useState([]);\n    const navigate = useNavigate();\n    const location = useLocation();\n    const { email } = location.state;\n\n    useEffect(() => {\n        // Fetch user-specific chats when the component mounts\n        axios.get(`http://localhost:8080/chats/user/${email}`)\n            .then(response => {\n                setChats(response.data);\n            })\n            .catch(error => {\n                console.error('Error fetching chats:', error);\n            });\n    }, [email]);\n\n    const handleChatClick = (chatId) => {\n        // Navigate to the chat page with the selected chat ID and user email\n        navigate(`/chat/${chatId}`, { state: { email } });\n    };\n\n    const handleCreateChat = () => {\n        // Create a new chat with null data\n        const newChat = {\n            name: null,\n            messages: []\n        };\n\n        axios.post(`http://localhost:8080/chats/${email}`, newChat)\n            .then(response => {\n            const newChatId = response.data?.id;\n            if (newChatId !== undefined) {\n                navigate(`/chat/${newChatId}`, { state: { email } });\n            } else {\n                console.error('Error: newChatId is undefined');\n            }\n            })\n            .catch(error => {\n            console.error('Error creating new chat:', error);\n            });\n    };\n\n    return (\n        <div>\n            <h1>Chat History</h1>\n            <button onClick={handleCreateChat}>+ New Chat</button>\n            <ul>\n                {chats.map(chat => (\n                    <li key={chat.id} onClick={() => handleChatClick(chat.id)}>\n                        {chat.name || 'Unnamed Chat'}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default ChatHistory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}