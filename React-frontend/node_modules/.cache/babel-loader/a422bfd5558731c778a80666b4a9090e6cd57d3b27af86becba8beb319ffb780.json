{"ast":null,"code":"var _jsxFileName = \"E:\\\\Chatbot(Meta Llama 3.1 8B)\\\\React-frontend\\\\src\\\\components\\\\chathistory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatHistory = () => {\n  _s();\n  var _location$state, _auth$currentUser;\n  const [chats, setChats] = useState([]);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const email = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.email) || ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.email);\n  useEffect(() => {\n    if (email) {\n      // Fetch user-specific chats when the component mounts\n      axios.get(`http://localhost:8080/chats/user/${email}`).then(response => {\n        setChats(response.data);\n      }).catch(error => {\n        console.error('Error fetching chats:', error);\n      });\n    }\n  }, [email]);\n  const handleChatClick = chatId => {\n    // Navigate to the chat page with the selected chat ID and user email\n    navigate(`/chat/${chatId}`, {\n      state: {\n        email\n      }\n    });\n  };\n  const handleCreateChat = () => {\n    // Create a new chat with null data\n    const newChat = {\n      name: null,\n      messages: []\n    };\n    axios.post(`http://localhost:8080/chats/${email}`, newChat).then(response => {\n      const newChatId = response.data.id;\n      navigate(`/chat/${newChatId}`, {\n        state: {\n          email\n        }\n      });\n    }).catch(error => {\n      console.error('Error creating new chat:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chat History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateChat,\n      children: \"+ New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: chats.map(chat => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleChatClick(chat.id),\n        children: chat.name || 'Unnamed Chat'\n      }, chat.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatHistory, \"J705183FWsI9N4hf0GQFlhxaywE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = ChatHistory;\nexport default ChatHistory;\nvar _c;\n$RefreshReg$(_c, \"ChatHistory\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","auth","jsxDEV","_jsxDEV","ChatHistory","_s","_location$state","_auth$currentUser","chats","setChats","navigate","location","email","state","currentUser","get","then","response","data","catch","error","console","handleChatClick","chatId","handleCreateChat","newChat","name","messages","post","newChatId","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","chat","_c","$RefreshReg$"],"sources":["E:/Chatbot(Meta Llama 3.1 8B)/React-frontend/src/components/chathistory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { auth } from '../firebase';\n\nconst ChatHistory = () => {\n    const [chats, setChats] = useState([]);\n    const navigate = useNavigate();\n    const location = useLocation();\n    const email = location.state?.email || auth.currentUser?.email;\n\n    useEffect(() => {\n        if (email) {\n            // Fetch user-specific chats when the component mounts\n            axios.get(`http://localhost:8080/chats/user/${email}`)\n                .then(response => {\n                    setChats(response.data);\n                })\n                .catch(error => {\n                    console.error('Error fetching chats:', error);\n                });\n        }\n    }, [email]);\n\n    const handleChatClick = (chatId) => {\n        // Navigate to the chat page with the selected chat ID and user email\n        navigate(`/chat/${chatId}`, { state: { email } });\n    };\n\n    const handleCreateChat = () => {\n        // Create a new chat with null data\n        const newChat = {\n            name: null,\n            messages: []\n        };\n\n        axios.post(`http://localhost:8080/chats/${email}`, newChat)\n            .then(response => {\n                const newChatId = response.data.id;\n                navigate(`/chat/${newChatId}`, { state: { email } });\n            })\n            .catch(error => {\n                console.error('Error creating new chat:', error);\n            });\n    };\n\n    return (\n        <div>\n            <h1>Chat History</h1>\n            <button onClick={handleCreateChat}>+ New Chat</button>\n            <ul>\n                {chats.map(chat => (\n                    <li key={chat.id} onClick={() => handleChatClick(chat.id)}>\n                        {chat.name || 'Unnamed Chat'}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default ChatHistory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}